
# GraphQL schema for an eCommerce site

# Represents a product in the catalog
type Product @model(name:"Product"){
    id: ID!
    name: String!
    description: String!
    price: Float!
    category: String!
    stock: Int!
    imageUrl: String
}

# Represents a user in the system
type User @model(name:"User") {
    id: ID!
    name: String!
    email: String!
    password: String! # In production, this should be securely managed
    cart: Cart
    orders: [Order]
}

# Represents the shopping cart of a user
type Cart @model(name:"Cart") {
    id: ID!
    userId: ID!
    items: [CartItem!]!
    totalPrice: Float!
}

# Represents an individual item in the shopping cart
type CartItem {
    product: Product!
    quantity: Int!
}

# Represents an order made by a user
type Order @model(name:"Order") {
    id: ID!
    userId: ID!
    items: [Product!]!
    totalAmount: Float!
    payment: Payment!
    status: String!
    placedAt: String!
}

# Represents an payment made by a user
type Payment @model(name:"Payment") {
    id: ID!
    userId: ID!
    amount: Float!
    status: String!
    paymentMethod: String!
}

# Represents an order made by a user
type Monitoring @model(name:"Monitoring") {
    id: ID!
    type: String!
    entity: String!
    entityId: String!
    timestamp: String!
type Character {
    id : ID,
    name : String,
    type: String,
    homePlanet: Int,
    primaryFunction: String,
    star: Star
}

type Planet @model(name:"PlanetAlias") {
    id : ID!,
    name : String,
    character: Character,
    age : Int,
    dimension : String,
    earth: Earth,
    tags: [String!],
    stars: [Star],
    additionalAttributes: [AdditionalAttribute],
    moons: [Moon],
    suns: [Sun]
}

type Star {
    id : ID,
    name : String,
    tag: Tag
}

type Tag {
    id : ID,
    name : String
}

type Moon {
    id : ID,
    name : String,
    details : String,
    moonAdditionalAttributes: [MoonAdditionalAttribute]
}

type Earth {
    id : ID,
    name : String,
    type: String @authorize(roles: ["authenticated"])
}

type Sun {
    id : ID,
    name : String
}

type AdditionalAttribute {
    id : ID,
    name : String,
    type: String
}

type MoonAdditionalAttribute {
    id : ID,
    name : String,
    moreAttributes: [MoreAttribute!]
}

type MoreAttribute {
    id : ID,
    name : String,
    type: String @authorize(roles: ["authenticated"])
}

type InvalidAuthModel @model @authorize(policy: "Crater") {
    id : ID!,
    name : String
}

type PlanetAgain @model {
    id : ID,
    name : String,
    type: String @authorize(roles: ["authenticated"])
}
